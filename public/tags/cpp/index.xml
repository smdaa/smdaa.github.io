<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpp on smdaa</title>
    <link>http://localhost:1313/tags/cpp/</link>
    <description>Recent content in Cpp on smdaa</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a keystroke audio classifier</title>
      <link>http://localhost:1313/post/building-a-keystroke-audio-classifier/</link>
      <pubDate>Tue, 10 Jun 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/building-a-keystroke-audio-classifier/</guid>
      <description>&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h2&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This short project explores machine learning methods for classifying keystrokes based on audio signal. The goal is to determine which key the user is pressing only by analyzing the sound it makes. First, we will look at the data collection method that captures keyboard sounds with precise cuts. Then, we will test different ML algorithms: MFCC features with traditional classifiers, a 1D CNN on raw audio, and neural networks on FFT spectrograms.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rendering Julia set fractals</title>
      <link>http://localhost:1313/post/rendering-julia-set-fractal/</link>
      <pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/rendering-julia-set-fractal/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Julia_set&#34;&gt;The Julia set&lt;/a&gt;, named after the french mathematician Gaston Julia, represents a complex pattern generated by iterating the function $f(z) = z^2 + c$ on complex numbers. Each point in the complex plane is tested by repeatedly applying this function, with its behavior revealing whether it &amp;ldquo;escapes&amp;rdquo; to infinity or stays bounded. The resulting set of points that remain bounded forms intricate, self-similar shapes that vary depending on the value of $c$.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simulating fluid</title>
      <link>http://localhost:1313/post/simulating-fluid/</link>
      <pubDate>Sun, 12 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/simulating-fluid/</guid>
      <description>&lt;p&gt;The following article is an implementation and a summarization of this paper:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://graphics.cs.cmu.edu/nsp/course/15-464/Fall09/papers/StamFluidforGames.pdf&#34;&gt;Real-Time Fluid Dynamics for Games&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/smdaa/creative-coding/blob/main/src/example_2/main.cpp&#34;&gt;View source code on GitHub&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/simulating-fluid/fluid_render.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h2&gt;&#xA;&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;&#xA;&lt;video &#xA;  controls width=&#34;800&#34;&#xA;&gt;&#xA;  &lt;source src=&#34;http://localhost:1313/assets/simulating-fluid/results.webm&#34; type=&#34;video/webm&#34;&gt;&#xA;  Your browser does not support the video tag.&#xA;&lt;/video&gt;&#xA;&lt;h2 id=&#34;theoretical-background&#34;&gt;Theoretical background&lt;/h2&gt;&#xA;&lt;p&gt;The Navier-Stokes equations serve as a precise mathematical framework for describing fluid flows found in nature, yet solving them can be quite challenging. Analytical solutions are only feasible in very basic scenarios. In practical applications, the priority is to ensure that simulations are both visually convincing and computationally efficient.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building a dynamic particle system</title>
      <link>http://localhost:1313/post/building-a-dynamic-particle-system/</link>
      <pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/building-a-dynamic-particle-system/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/building-a-dynamic-particle-system/final.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/smdaa/creative-coding/blob/main/src/example_1/main.cpp&#34;&gt;View source code on GitHub&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h2&gt;&#xA;&lt;h2 id=&#34;creating-a-particle-system&#34;&gt;Creating a particle system&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s start by creating the particle object. A particle has the following properties: a radius $r$, a position $(x, y)$, a velocity $(v_x, v_y)$, and an optional color.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;Particle&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  vec2 position;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  vec2 velocity;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;float&lt;/span&gt; radius;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Color color;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Particle(&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; vec2 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;position, &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; vec2 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;velocity, &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;float&lt;/span&gt; radius,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Color color)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; position(position), velocity(velocity), radius(radius), color(color) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;draw&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gl&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;::&lt;/span&gt;color(color);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gl&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;::&lt;/span&gt;drawSolidCircle(position, radius);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;updateVelocity&lt;/span&gt;(vec2 force, &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;float&lt;/span&gt; dt) { velocity &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+=&lt;/span&gt; force &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt; dt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;updatePosition&lt;/span&gt;(&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;float&lt;/span&gt; dt) { position &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+=&lt;/span&gt; velocity &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt; dt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since we want our particle to remain inside the screen, we will use the factor &lt;strong&gt;WALL_BOUNCE_FACTOR&lt;/strong&gt; $\in [0, 1]$ to bounce the particle in the other way if it leaves the screen.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
